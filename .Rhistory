#install_github(repo='rCharts',username='ramnathv',ref="dev")
#install_github(repo='rMaps',username='ramnathv',ref="master")
# Carga datos
#####
envipe  <- read.csv("data/envipe2011-2014.csv", encoding= "utf8",stringsAsFactors=F)
# Subset states
envipe  <- subset(envipe, envipe$codigo != 0)
# Subset incidencia delictiva
names(envipe)
inc  <- envipe[,c(1:3,5,8,11,14)]
names(inc)
# Melt dataframe
minc  <- melt(data=inc,id.vars=c(1:3))
head(minc); tail(minc)
# Cambiar nombres
names(minc)  <- c("state_code","name","state_name","year","incidencia")
# Elimar "pre"
minc$year  <- gsub("inc","", minc$year)
minc$year  <- as.numeric(minc$year)
table(minc$year) # 32 obs
head(minc); tail(minc)
# Mapas interactivos:
#======
# Instalar librerías en Mac
#require(reshape2)
#require(devtools)
#install_github(repo='rCharts',username='ramnathv',ref="dev")
#install_github(repo='rMaps',username='ramnathv',ref="master")
#require(rCharts)
#require(rMaps)
# Esta parte del script produce un mapa interactivo .html
# Requiere un servidor local, en la terminal de Mac usar: python -m SimpleHTTPServer 8888
#####
# Separar prevalencia en intervalos
dat <- transform(minc,
fillKey = cut(incidencia, breaks=c(quantile(incidencia, probs = seq(0, 1, by = 0.20))), dig.lab = 5, include.lowest=T, right=T)
)
table(dat$fillKey)
keyNames <- levels(dat$fillKey)
dat$incidencia  <- format(dat$incidencia, big.mark=",", digits=1)
# Colores
fills = setNames(
c(RColorBrewer::brewer.pal(5, 'YlOrRd'), '#BD0026'),
c(levels(dat$fillKey), 'defaultFill')
)
str(fills)
dat2 <- plyr::dlply(na.omit(dat), "year", function(x){
y = rCharts::toJSONArray2(x, json = F)
names(y) = lapply(y, '[[', 'name')
return(y)
})
# Existe un bug en la función ichoropleth, utilizar el formato propuesto por Diego Valle-Jones
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "shapefiles/mx_states.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo>' + geography.properties.name + ': ' + data.incidencia + '</div>';
}  !#"
),
dom = 'chart_1',
scope = 'states',
labels = TRUE,
bodyattrs = "ng-app ng-controller='rChartsCtrl'",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([-90, 24])
.scale(element.offsetWidth)
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path()
.projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = dat2[[1]],
legend = TRUE,
labels = TRUE
)
d1$save("incidencia.html", cdn = TRUE)
#####
### Map con botones
#####
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<div class=\"btn-group\" >
<button ng-repeat=\"value in years\" ng-click='updateYear(value)'
class=\"btn btn-default\" type=\"button\"
ng-model=\"value\" btn-radio=\"value\">
{{ value }}
</button>
</div>
<div id='chart_1' class='rChart datamaps'></div>
</div>
<script>
function rChartsCtrl($scope){
$scope.years = [2010, 2011, 2012, 2013]
$scope.year = $scope.years[0]
$scope.updateYear = function(x){
$scope.year = x
}
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>  "
)
d1$set(newData = dat2)
d1$save("incidencia.html", cdn = TRUE)
# Despues de ejecutar el codigo es necesario agregar la referncia a bootstra en el html
#<link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
# Tambien hay que modificar el <style> con los siguientes parámetros
#.container { margin-top: 20px; }
# .datamaps-legend dt{font-weight: normal; }
# Agregar manualmente {{value}} en el html
View(inc)
View(envipe)
envipe  <- read.csv("data/envipe2011-2014.csv", encoding= "utf8",stringsAsFactors=F)
# Mantener solo datos para los estados
envipe  <- subset(envipe, envipe$codigo != 0)
# Subset prevalencia delictiva
names(envipe)
inc  <- envipe[,c(1:3,5,8,11,14)]
names(inc)
# Agregar datos de averiguaciones previas
ave  <-  read.csv("data/fuero-comun-estados.csv", as.is=T)
head(ave)
# Mantener solo el año de interes para las averiguaciones previas en 2010, 2011 y 2012
table(ave$year)
ave  <- subset(ave, ave$year == 2010 | ave$year == 2011 | ave$year == 2012 | ave$year == 2013)
# Colapsar todas las averiguaciones previas en una sola
names(ave)
require(plyr)
head(ave)
ave <- ddply(ave, c("state_code","year"), summarize,
averiguaciones = sum(count,na.rm=T),
population = max(population))
head(ave)
# Tasa de delitos del fuero común por cada 100 mil habiantes
ave$rate  <- (ave$averiguaciones / ave$population) * 100000
ave  <- ave[,c(1,2,5)]
# Cambiar de averiguaciones de formato long a wide
temp  <- melt(ave, id=c("state_code","year"),
measured=c("rate"))
temp$value  <- as.numeric(format(round(as.numeric(temp$value),2), nsmall = 2))
head(temp)
tasas_ave  <- dcast(temp, state_code ~ variable + year)
head(tasas_ave)
# Unir datos envipe con averiguaciones
head(inc)
head(tasas_ave)
data  <-  merge(inc, tasas_ave, by.x="codigo", by.y="state_code")
head(data)
# Calcular cifra negra: incidencia delictiva reportadap por la envipe como porcentaje del
# número de averiguaciones previas reportado por el secretariado de seguridad pública
data  <- transform(data, cf2010 = ((inc2010 -rate_2010)/inc2010)*100 )
data  <- transform(data, cf2011 = ((inc2011 -rate_2011)/inc2011)*100 )
data  <- transform(data, cf2012 = ((inc2012 -rate_2012)/inc2012)*100 )
data  <- transform(data, cf2013 = ((inc2013 -rate_2013)/inc2013)*100 )
# Mantener solo las columnas de cifra negra
data  <- data[,-4:-11]
# Cambiar formato a dos decimales
names(data)
cols  <- c(4:7)
data[,cols]  <-  apply(data[,cols], 2, function(x) as.numeric(format(round(as.numeric(x),2), nsmall = 2)))
summary(data[,cols])
# Melt dataframe para hacer el mapa interactivo
data  <- melt(data=data,id.vars=c(1:3))
head(data); tail(data)
table(data$variable)
# Cambiar nombres
head(data)
names(data)  <- c("state_code","name","state_name","year","cifra_negra")
# Elimar "cf"
data$year  <- gsub("cf","", data$year)
data$year  <- as.numeric(data$year)
table(data$year) # 32 obs
head(data); tail(data)
# Esta parte del script produce un mapa interactivo .html
require(rMaps)
require(rCharts)
# Requiere un servidor local, en la terminal de Mac usar: python -m SimpleHTTPServer 8888
#####
# Separar prevalencia en intervalos
options(scipen=999)
d <- 3
dat <- transform(data,
fillKey = cut(cifra_negra, breaks=c(quantile(cifra_negra, probs = seq(0, 1, by = 0.20))), dig.lab = d, include.lowest=T, right=T)
)
str(dat$fillKey)
levels(dat$fillKey)
names(dat)
dat$fillKey
#dat$fillKey  <- gsub("1e\\+02","99.5", dat$fillKey)
#dat$fillKey  <- as.factor(dat$fillKey)
keyNames <- levels(dat$fillKey)
keyNames
# Colores
fills = setNames(
c(RColorBrewer::brewer.pal(5, 'YlOrRd'), '#BD0026'),
c(levels(dat$fillKey), 'defaultFill')
)
str(fills)
dat2 <- plyr::dlply(na.omit(dat), "year", function(x){
y = rCharts::toJSONArray2(x, json = F)
names(y) = lapply(y, '[[', 'name')
return(y)
})
envipe  <- read.csv("data/envipe2011-2014.csv", encoding= "utf8",stringsAsFactors=F)
# Subset states
envipe  <- subset(envipe, envipe$codigo != 0)
# Subset incidencia delictiva
names(envipe)
inc  <- envipe[,c(1:3,5,8,11,14)]
names(inc)
# Melt dataframe
minc  <- melt(data=inc,id.vars=c(1:3))
head(minc); tail(minc)
# Cambiar nombres
names(minc)  <- c("state_code","name","state_name","year","incidencia")
# Elimar "pre"
minc$year  <- gsub("inc","", minc$year)
minc$year  <- as.numeric(minc$year)
table(minc$year) # 32 obs
head(minc); tail(minc)
# Mapas interactivos:
#======
# Instalar librerías en Mac
#require(reshape2)
#require(devtools)
#install_github(repo='rCharts',username='ramnathv',ref="dev")
#install_github(repo='rMaps',username='ramnathv',ref="master")
#require(rCharts)
#require(rMaps)
# Esta parte del script produce un mapa interactivo .html
# Requiere un servidor local, en la terminal de Mac usar: python -m SimpleHTTPServer 8888
#####
# Separar prevalencia en intervalos
dat <- transform(minc,
fillKey = cut(incidencia, breaks=c(quantile(incidencia, probs = seq(0, 1, by = 0.20))), dig.lab = 5, include.lowest=T, right=T)
)
table(dat$fillKey)
keyNames <- levels(dat$fillKey)
dat$incidencia  <- format(dat$incidencia, big.mark=",", digits=1)
# Colores
fills = setNames(
c(RColorBrewer::brewer.pal(5, 'YlOrRd'), '#BD0026'),
c(levels(dat$fillKey), 'defaultFill')
)
str(fills)
dat2 <- plyr::dlply(na.omit(dat), "year", function(x){
y = rCharts::toJSONArray2(x, json = F)
names(y) = lapply(y, '[[', 'name')
return(y)
})
View(dat)
envipe  <- read.csv("data/envipe2011-2014.csv", encoding= "utf8",stringsAsFactors=F)
# Mantener solo datos para los estados
envipe  <- subset(envipe, envipe$codigo != 0)
# Subset prevalencia delictiva
names(envipe)
inc  <- envipe[,c(1:3,5,8,11,14)]
names(inc)
# Agregar datos de averiguaciones previas
ave  <-  read.csv("data/fuero-comun-estados.csv", as.is=T)
head(ave)
# Mantener solo el año de interes para las averiguaciones previas en 2010, 2011 y 2012
table(ave$year)
ave  <- subset(ave, ave$year == 2010 | ave$year == 2011 | ave$year == 2012 | ave$year == 2013)
# Colapsar todas las averiguaciones previas en una sola
names(ave)
require(plyr)
head(ave)
ave <- ddply(ave, c("state_code","year"), summarize,
averiguaciones = sum(count,na.rm=T),
population = max(population))
head(ave)
# Tasa de delitos del fuero común por cada 100 mil habiantes
ave$rate  <- (ave$averiguaciones / ave$population) * 100000
ave  <- ave[,c(1,2,5)]
# Cambiar de averiguaciones de formato long a wide
temp  <- melt(ave, id=c("state_code","year"),
measured=c("rate"))
temp$value  <- as.numeric(format(round(as.numeric(temp$value),2), nsmall = 2))
head(temp)
tasas_ave  <- dcast(temp, state_code ~ variable + year)
head(tasas_ave)
# Unir datos envipe con averiguaciones
head(inc)
head(tasas_ave)
data  <-  merge(inc, tasas_ave, by.x="codigo", by.y="state_code")
head(data)
# Calcular cifra negra: incidencia delictiva reportadap por la envipe como porcentaje del
# número de averiguaciones previas reportado por el secretariado de seguridad pública
data  <- transform(data, cf2010 = ((inc2010 -rate_2010)/inc2010)*100 )
data  <- transform(data, cf2011 = ((inc2011 -rate_2011)/inc2011)*100 )
data  <- transform(data, cf2012 = ((inc2012 -rate_2012)/inc2012)*100 )
data  <- transform(data, cf2013 = ((inc2013 -rate_2013)/inc2013)*100 )
# Mantener solo las columnas de cifra negra
data  <- data[,-4:-11]
# Cambiar formato a dos decimales
names(data)
cols  <- c(4:7)
data[,cols]  <-  apply(data[,cols], 2, function(x) as.numeric(format(round(as.numeric(x),2), nsmall = 2)))
summary(data[,cols])
# Melt dataframe para hacer el mapa interactivo
data  <- melt(data=data,id.vars=c(1:3))
head(data); tail(data)
table(data$variable)
# Cambiar nombres
head(data)
names(data)  <- c("state_code","name","state_name","year","cifra_negra")
# Elimar "cf"
data$year  <- gsub("cf","", data$year)
data$year  <- as.numeric(data$year)
table(data$year) # 32 obs
head(data); tail(data)
# Esta parte del script produce un mapa interactivo .html
require(rMaps)
require(rCharts)
# Requiere un servidor local, en la terminal de Mac usar: python -m SimpleHTTPServer 8888
#####
# Separar prevalencia en intervalos
options(scipen=999)
d <- 3
dat <- transform(data,
fillKey = cut(cifra_negra, breaks=c(quantile(cifra_negra, probs = seq(0, 1, by = 0.20))), dig.lab = d, include.lowest=T, right=T)
)
str(dat$fillKey)
levels(dat$fillKey)
names(dat)
dat$fillKey
#dat$fillKey  <- gsub("1e\\+02","99.5", dat$fillKey)
#dat$fillKey  <- as.factor(dat$fillKey)
keyNames <- levels(dat$fillKey)
keyNames
# Colores
fills = setNames(
c(RColorBrewer::brewer.pal(5, 'YlOrRd'), '#BD0026'),
c(levels(dat$fillKey), 'defaultFill')
)
str(fills)
dat2 <- plyr::dlply(na.omit(dat), "year", function(x){
y = rCharts::toJSONArray2(x, json = F)
names(y) = lapply(y, '[[', 'name')
return(y)
})
View(data)
d1 <- Datamaps$new()
d1$set(
geographyConfig = list(
dataUrl = "shapefiles/mx_states.json",
popupTemplate =  "#! function(geography, data) { //this function should just return a string
return '<div class=hoverinfo><strong>' + geography.properties.name +  ': ' + data.cifra_negra +'</strong></div>';
}  !#"
),
dom = 'chart_1',
scope = 'states',
labels = TRUE,
bodyattrs = "ng-app ng-controller='rChartsCtrl'",
setProjection = '#! function( element, options ) {
var projection, path;
projection = d3.geo.mercator()
.center([-90, 24])
.scale(element.offsetWidth)
.translate([element.offsetWidth / 2, element.offsetHeight / 2]);
path = d3.geo.path()
.projection( projection );
return {path: path, projection: projection};
} !#',
fills = fills,
data = dat2[[1]],
legend = TRUE,
labels = TRUE
)
d1$save("cifra_negra.html", cdn = TRUE)
#####
### Map con botones
#####
d1$addAssets(
jshead = "http://cdnjs.cloudflare.com/ajax/libs/angular.js/1.2.1/angular.min.js"
)
d1$setTemplate(chartDiv = "
<div class='container'>
<div class=\"btn-group\" >
<button ng-repeat=\"value in years\" ng-click='updateYear(value)'
class=\"btn btn-default\" type=\"button\"
ng-model=\"value\" btn-radio=\"value\">
{{ value }}
</button>
</div>
<div id='chart_1' class='rChart datamaps'></div>
</div>
<script>
function rChartsCtrl($scope){
$scope.years = [2010, 2011, 2012, 2013]
$scope.year = $scope.years[0]
$scope.updateYear = function(x){
$scope.year = x
}
$scope.$watch('year', function(newYear){
mapchart_1.updateChoropleth(chartParams.newData[newYear]);
})
}
</script>  "
)
d1$set(newData = dat2)
d1$save("cifra_negra.html", cdn = TRUE)
# Despues de ejecutar el codigo es necesario agregar la referncia a bootstra en el html
#<link href="http://netdna.bootstrapcdn.com/bootstrap/3.0.3/css/bootstrap.min.css" rel="stylesheet">
# Tambien hay que modificar el <style> con los siguientes parámetros
#.container { margin-top: 20px; }
#.datamaps-legend dt{font-weight: normal; }
# Agregar manualmente {{value}} en el html
require(rCharts)
require(ggplot2)
require(scales)
require(wordcloud)
data  <- read.csv("data/envipe2011-2014.csv", as.is=T, encoding="utf8")
pdf("images/text_plot.pdf", width=7.7, height=7.7)
textplot(data$pre2013,data$inc2013, words=data$abreviatura,xlim=c(min(data$pre2013),
max(data$pre2013)), ylim=c(min(data$inc2013),max(data$inc2013)), show.lines=T, cex=1) +
title("Tasas de incidencia y prevalencia delictiva \n (por cada 100 mil habitantes)")
grid(NULL, lty =2, lwd =2)
dev.off()
# Percepción inseguridad
p  <- ggplot(data, aes(x=ins2014, y= reorder(abreviatura, ins2014))) + geom_point(size=3)
mex_eval_theme  <- theme_bw() + theme(text = element_text(family="Helvetica"),
plot.title = element_text(face="bold",hjust=3), panel.grid.major = element_line(size =.8),
legend.position=c(1,0))
png("images/percepcion2014.png", width=567, height=567)
p + ggtitle("Percepción de inseguridad en la entidad federativa \ (marzo y abril de 2014)") +
xlab("Porcentaje de la población de 18 años y más") + ylab("Entidad") + mex_eval_theme
p + xlab("Porcentaje de la población de 18 años y más") + ylab("Entidad") + mex_eval_theme
dev.off()
# Incidencia, prevalencia y percepción inseguridad (scatter plot)
names(data)
q  <- ggplot(data, aes(x = inc2013, y = pre2013, size=ins2014)) + geom_text(aes(label=abreviatura)) +
scale_y_continuous(lim=c(0,50000),labels=comma) + scale_x_continuous(lim=c(0,60000),labels=comma) +mex_eval_theme
q  <- q + scale_size(range=c(1,6)) + xlab("Incidencia delictiva en 2013") + ylab("Pevalencia delictiva en 2013") +
labs(size="% Pob 18 y más\n percibe inseguridad")
q
# png
mex_eval_theme  <- theme_bw() + theme(text = element_text(family="Helvetica"),
plot.title = element_text(face="bold", hjust=0),
panel.grid.major = element_line(size =.8),
legend.position=c(1,0), legend.justification=c(1,0),
legend.background=element_rect(fill="white",colour="black"))
q  <- ggplot(data, aes(x = inc2013, y = pre2013, size=ins2014)) +
geom_point(aes(label=abreviatura), shape=1, postion="jitter") +
geom_text(aes(x=inc2013 +600, label=abreviatura),size=3, hjust=0, vjust=1) +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma) +mex_eval_theme
q <- q + xlab("Incidencia delictiva en 2013") + ylab("Pevalencia delictiva en 2013") +
labs(size="% Pob 18 años y\n más que percibe\ninseguridad en la \nentidad") +
ggtitle("Percepción de inseguridad en la entidad federativa \n (marzo y abril de 2014) y tasas de incidencia y prevalencia delictivas\npor cada 100 mil habitanes en 2013")
q
# Exportar imagen como PDF
png("images/prevalencia_vs_incidencia.png", width=567, height=490)
q
dev.off()
pdf("images/prevalencia_vs_incidencia.pdf", width=6.35, height=5.34)
q
dev.off()
pdf("images/text_plot.pdf", width=7.7, height=7.7)
textplot(data$pre2013,data$inc2013, words=data$abreviatura,xlim=c(min(data$pre2013),
max(data$pre2013)), ylim=c(min(data$inc2013),max(data$inc2013)), show.lines=T, cex=1) +
title("Tasas de incidencia y prevalencia delictiva \n (por cada 100 mil habitantes)")
grid(NULL, lty =2, lwd =2)
dev.off()
# Percepción inseguridad
p  <- ggplot(data, aes(x=ins2014, y= reorder(abreviatura, ins2014))) + geom_point(size=3)
mex_eval_theme  <- theme_bw() + theme(text = element_text(family="Helvetica"),
plot.title = element_text(face="bold",hjust=3), panel.grid.major = element_line(size =.8),
legend.position=c(1,0))
png("images/percepcion2014.png", width=567, height=567)
p + ggtitle("Percepción de inseguridad en la entidad federativa \ (marzo y abril de 2014)") +
xlab("Porcentaje de la población de 18 años y más") + ylab("Entidad") + mex_eval_theme
p + xlab("Porcentaje de la población de 18 años y más") + ylab("Entidad") + mex_eval_theme
dev.off()
# Incidencia, prevalencia y percepción inseguridad (scatter plot)
names(data)
q  <- ggplot(data, aes(x = inc2013, y = pre2013, size=ins2014)) + geom_text(aes(label=abreviatura)) +
scale_y_continuous(lim=c(0,50000),labels=comma) + scale_x_continuous(lim=c(0,60000),labels=comma) +mex_eval_theme
q  <- q + scale_size(range=c(1,6)) + xlab("Incidencia delictiva en 2013") + ylab("Pevalencia delictiva en 2013") +
labs(size="% Pob 18 y más\n percibe inseguridad")
q
# png
mex_eval_theme  <- theme_bw() + theme(text = element_text(family="Helvetica"),
plot.title = element_text(face="bold", hjust=0),
panel.grid.major = element_line(size =.8),
legend.position=c(1,0), legend.justification=c(1,0),
legend.background=element_rect(fill="white",colour="black"))
q  <- ggplot(data, aes(x = inc2013, y = pre2013, size=ins2014)) +
geom_point(aes(label=abreviatura), shape=1, postion="jitter") +
geom_text(aes(x=inc2013 +600, label=abreviatura),size=3, hjust=0, vjust=1) +
scale_y_continuous(labels=comma) +
scale_x_continuous(labels=comma) +mex_eval_theme
q <- q + xlab("Incidencia delictiva en 2013") + ylab("Pevalencia delictiva en 2013") +
labs(size="% Pob 18 años y\n más que percibe\ninseguridad en la \nentidad") +
ggtitle("Percepción de inseguridad en la entidad federativa \n (marzo y abril de 2014) y tasas de incidencia y prevalencia \ndelictivas por cada 100 mil habitanes en 2013")
q
# Exportar imagen como PDF
png("images/prevalencia_vs_incidencia.png", width=567, height=490)
q
dev.off()
pdf("images/prevalencia_vs_incidencia.pdf", width=6.35, height=5.34)
q
dev.off()
